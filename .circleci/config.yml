#
# Javascript Node CircleCI 2.0 configuration file.
#
# Check https://circleci.com/docs/2.0/language-javascript/ for more details
#
version: 2.1
orbs:
  aws-ecs: circleci/aws-ecs@0.0.10

references:
  set_env_sls: &set_env_sls
    run:
      command: |
        SLS_STAGE="<< parameters.stage_name >>" yarn ci:setEnvs
        source $BASH_ENV

jobs:
  checkout-and-install:
    docker:
      - image: univision/fe-webapp-base:8
    working_directory: ~/univision/univision-fe
    steps:
      - checkout
      - restore_cache:
          keys:
            - univision-fe-install-{{ .Environment.CIRCLE_SHA1 }}
      - restore_cache:
          keys:
            - univision-fe-cache-{{ checksum "yarn.lock" }}
      - run:
          name: Setup npm and git credentials
          command: |
            echo "//registry.npmjs.org/:_authToken=$NPM_TOKEN" >> ~/.npmrc
            git config --global user.email "$GITHUB_EMAIL"
            git config --global user.name "$GITHUB_USERNAME"
      - run:
          name: Check versions and install
          command: |
            vim --version
            yarn --version
            sudo apt install python2
            python2 -V
            yarn --frozen-lockfile --cache-folder ~/.cache/yarn
      - run:
          name: Check if should cancel redundant builds
          command: if [ "$CIRCLE_BRANCH" != "feat/integration" && "${CIRCLE_BRANCH}" != 'tag-hotfix/master']; then yarn ci:cancelBuilds; fi
      - save_cache:
          key: univision-fe-install-{{ .Environment.CIRCLE_SHA1 }}
          paths:
            - ~/univision/univision-fe
      - save_cache:
          key: univision-fe-cache-{{ checksum "yarn.lock" }}
          paths:
            - ~/.cache/yarn
  build-modules:
    shell: /bin/bash --login
    docker:
      - image: univision/fe-webapp-base:8
    working_directory: ~/univision/univision-fe
    environment:
#      CIRCLE_ARTIFACTS: /tmp/circleci-artifacts
#      CIRCLE_TEST_REPORTS: /tmp/circleci-test-results
#      PATH: ${PATH}:${HOME}/${CIRCLE_PROJECT_REPONAME}/node_modules/.bin
      NODE_ENV: production
    steps:
      - restore_cache:
          keys:
            - univision-fe-install-{{ .Environment.CIRCLE_SHA1 }}
      - run:
          name: Build all packages
          command: |
            yarn run:core clean
            yarn build:all
      - save_cache:
          key: univision-fe-build-modules-{{ .Environment.CIRCLE_SHA1 }}
          paths: ~/univision/univision-fe
  lint:
    working_directory: ~/univision/univision-fe
    resource_class: medium+
    docker:
      - image: univision/fe-webapp-base:8
    steps:
      - restore_cache:
          keys:
            - univision-fe-build-modules-{{ .Environment.CIRCLE_SHA1 }}
      - run: yarn lint:all
  test:
    working_directory: ~/univision/univision-fe
    resource_class: 2xlarge+
    environment:
      TZ: "America/New_York"
    docker:
      - image: univision/fe-webapp-base:8
        environment:
          TZ: "America/New_York"
    steps:
      - restore_cache:
          keys:
            - univision-fe-build-modules-{{ .Environment.CIRCLE_SHA1 }}
      - run: yarn test:all
  export-docs:
    working_directory: ~/univision/univision-fe
    docker:
      - image: univision/fe-webapp-base:8
    parameters:
      stage_name:
        type: string
    environment:
      NODE_ENV: production
      MAX_PARALLEL: 1
    steps:
      - restore_cache:
          keys:
            - univision-fe-build-modules-{{ .Environment.CIRCLE_SHA1 }}
      - *set_env_sls
      - run:
          name: Export docs
          command: yarn docs:all
      - run:
          name: Upload docs assets
          command: yarn ci:docs
  export-storybooks:
    working_directory: ~/univision/univision-fe
    resource_class: medium+
    docker:
      - image: univision/fe-webapp-base:8
    parameters:
      stage_name:
        type: string
    environment:
      NODE_ENV: production
      MAX_PARALLEL: 1
    steps:
      - restore_cache:
          keys:
            - univision-fe-build-modules-{{ .Environment.CIRCLE_SHA1 }}
      - *set_env_sls
      - run:
          name: Export storybooks
          command: |
            export NODE_OPTIONS=--openssl-legacy-provider
            yarn story:export:all
      - run:
          name: Upload storybooks assets
          command: yarn ci:storybooks --continue-on-error
  build-app:
    working_directory: ~/univision/univision-fe
    resource_class: 2xlarge+
    docker:
      - image: univision/fe-webapp-base:8
    environment:
      NODE_ENV: production
      MAX_PARALLEL: 1
    steps:
      - restore_cache:
          keys:
            - univision-fe-build-modules-{{ .Environment.CIRCLE_SHA1 }}
      - run:
          command: |
            yarn ci:setEnvs
            source $BASH_ENV
      - run:
          command: yarn run:core prod:build
          no_output_timeout: "15m"
      - save_cache:
          key: univision-fe-prod-build-{{ .Environment.CIRCLE_SHA1 }}
          paths: ~/univision/univision-fe
  upload-assets:
    working_directory: ~/univision/univision-fe
    docker:
      - image: univision/fe-webapp-base:8
    steps:
      - restore_cache:
          keys:
            - univision-fe-prod-build-{{ .Environment.CIRCLE_SHA1 }}
      - run:
          name: Set Environment Variables
          command: |
            #/bin/bash

            set -e
            if [[ "${CIRCLE_BRANCH}" == 'master' || "${CIRCLE_BRANCH}" == 'tag-hotfix/master' ]]
            then
              echo 'export AWS_ACCESS_KEY_ID="$AWS_ACCESS_KEY_ID_PROD"' >> ${BASH_ENV}
              echo 'export AWS_SECRET_ACCESS_KEY="$AWS_SECRET_ACCESS_KEY_PROD"' >> ${BASH_ENV}
              echo 'export AWS_S3_ASSETS_BUCKET="$AWS_S3_ASSETS_BUCKET_PROD"' >> ${BASH_ENV}
            elif [[ "${CIRCLE_BRANCH}" == 'feat/performance' ]]
            then
              echo 'export AWS_ACCESS_KEY_ID="$AWS_ACCESS_KEY_ID_DEV"' >> ${BASH_ENV}
              echo 'export AWS_SECRET_ACCESS_KEY="$AWS_SECRET_ACCESS_KEY_DEV"' >> ${BASH_ENV}
              echo 'export AWS_S3_ASSETS_BUCKET="$AWS_S3_ASSETS_BUCKET_DEV"' >> ${BASH_ENV}
            fi
      - run:
          command: |
            yarn ci:setEnvs
            yarn run:ci ci:uploadAssets
  docker-image:
    working_directory: ~/univision/univision-fe
    docker:
      - image: univision/fe-webapp-base:8
    steps:
      - setup_remote_docker
      - restore_cache:
          keys:
            - univision-fe-prod-build-{{ .Environment.CIRCLE_SHA1 }}
      - run:
          command: |
            yarn ci:setEnvs
            source $BASH_ENV
      - run:
          command: |
            docker build -t $AWS_ECR_IMAGE_NAME:$CIRCLE_SHA1 .
      - run:
          name: Save docker image to an archive
          command: |
            mkdir docker-image
            docker save -o docker-image/image.tar $AWS_ECR_IMAGE_NAME:$CIRCLE_SHA1
      - persist_to_workspace:
          root: .
          paths:
            - docker-image
  e2e-cypress:
    working_directory: ~/univision/univision-fe
    docker:
      - image: univision/fe-webapp-base:8
    environment:
      MULTI_DOMAIN_DISABLED: true
    steps:
      - restore_cache:
          keys:
            - univision-fe-prod-build-{{ .Environment.CIRCLE_SHA1 }}
      - restore_cache:
          keys:
            - univision-fe-cache-{{ checksum "yarn.lock" }}
      - attach_workspace:
          at: workspace
      - run:
          type: shell
          command: |
            wget -q -O - https://dl-ssl.google.com/linux/linux_signing_key.pub | sudo apt-key add -
            sudo sh -c 'echo "deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main" >> /etc/apt/sources.list.d/google-chrome.list'
            sudo apt-get update
            sudo apt-get install google-chrome-stable
            sudo apt-get -y install xvfb libgtk2.0-0 libnotify-dev libgconf-2-4 libnss3 libxss1 libasound2
            yarn ci:setEnvs
            source $BASH_ENV
      - run:
          command: yarn start
          background: true
      - run:
          name: Wait for the server and run test
          command: yarn run:e2e
      - store_artifacts:
          path: ~/univision/univision-fe/packages/end-to-end/cypress/cypress/screenshots
          destination: cypress-screenshots
  npm-publish:
    docker:
      - image: univision/fe-webapp-base:8
    working_directory: ~/univision/univision-fe
    environment:
      NODE_ENV: production
    parameters:
      release-type:
        type: string
        default: prerelease
    steps:
      - restore_cache:
          keys:
            - univision-fe-install-{{ .Environment.CIRCLE_SHA1 }}
      - run:
          name: Add node_modules bin to path
          command: |
            echo export PATH=${HOME}/${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME}/node_modules/.bin:${PATH} >> $BASH_ENV
            source $BASH_ENV
      - run:
          name: Setup github access
          command: |
            mkdir ~/.ssh
            ssh-keyscan github.com >> ~/.ssh/known_hosts
            echo "//registry.npmjs.org/:_authToken=$NPM_TOKEN" >> ~/.npmrc
            git config --global user.email "$GITHUB_EMAIL"
            git config --global user.name "$GITHUB_USERNAME"
      - when:
          condition:
            equal: [ 'release', << parameters.release-type >>]
          steps:
            - run:
                name: Publish NPM packages release.
                command: |
                  lerna publish --loglevel silly --conventional-commits --yes -m "Published %s [skip ci]"
            - save_cache:
                key: univision-fe-prod-publish-{{ .Environment.CIRCLE_SHA1 }}
                paths: ~/univision/univision-fe
      - when:
          condition:
            equal: [ 'prerelease', << parameters.release-type >>]
          steps:
            - run:
                name: Publish NPM packages pre-release.
                command: |
                  lerna publish --canary --preid rc --dist-tag next --loglevel silly --conventional-commits --yes -m "Published rc %s [skip ci]"
      - when:
          condition:
            equal: [ 'hotfix', << parameters.release-type >>]
          steps:
            - run:
                name: Publish NPM packages alpha release for hot fixes.
                command: |
                  lerna publish --canary prepatch --dist-tag canary --loglevel silly --conventional-commits --yes -m "Published hotfix %s [skip ci]"
            - run:
                name: Merge down to master for hotfix only
                command: |
                  git checkout master
                  git pull --no-edit origin master
                  git merge --no-ff -m "Merge branch 'tag-hotfix' into 'master' [ci skip]" origin/tag-hotfix/master
                  git push
  deploy-lambda:
    working_directory: ~/univision/univision-fe
    docker:
      - image: univision/fe-webapp-base:8
    parameters:
      stage_name:
        type: string
    steps:
      - restore_cache:
          keys:
            - univision-fe-build-modules-{{ .Environment.CIRCLE_SHA1 }}
      - run:
         name: Set Version environment variable
         command: |
           echo export VERSION=$(node -p -e "require('./packages/core/package.json').version") >> ${BASH_ENV}
      - run: echo $VERSION
      - run:
          command: |
            SLS_STAGE="<< parameters.stage_name >>" yarn ci:setEnvs
            source $BASH_ENV
      - run:
          name: Build Lambdas
          command: |
            export NODE_OPTIONS=--openssl-legacy-provider
            yarn run:app build:serverless
      - run:
          name: Create styles layer
          command: |
            cd packages/app
            chmod +x ./deploy/create_layer.sh
            ./deploy/create_layer.sh
      - run:
          name: Deploy service
          command: |
            cd packages/app
            yarn deploy << parameters.stage_name >>
      - save_cache:
          key: univision-fe-lambda-build-{{ .Environment.CIRCLE_SHA1 }}
          paths: ~/univision/univision-fe 
  deploy-lambda-prod:
    working_directory: ~/univision/univision-fe
    docker:
      - image: univision/fe-webapp-base:8
    steps:
      - restore_cache:
          keys:
            - univision-fe-lambda-build-{{ .Environment.CIRCLE_SHA1 }}
      - restore_cache:
          keys:
            - univision-fe-prod-publish-{{ .Environment.CIRCLE_SHA1 }}
      - run:
         name: Set Version environment variable
         command: |
           echo export VERSION=$(node -p -e "require('./packages/core/package.json').version") >> ${BASH_ENV}
      - run: echo $VERSION
      - run:
          command: |
            SLS_STAGE="prod" yarn ci:setEnvs
            source $BASH_ENV
      - run:
          name: Deploy service
          command: |
            yarn run:app deploy prod
  publish-github-release:
    working_directory: ~/univision/univision-fe
    docker:
      - image: univision/fe-webapp-base:8
    steps:
      - checkout
      - run:
          name: Setup git credentials
          command: |
            git config --global user.email "$GITHUB_EMAIL"
            git config --global user.name "$GITHUB_USERNAME"
      - run: git pull --no-edit origin master
      - run:
          name: Set Environment Variables
          command: |
            echo export VERSION=$(node -p -e "require('./packages/core/package.json').version") >> ${BASH_ENV}
            echo export NEW_CHANGE_LOG=\"$(git log -1 -p --simplify-merges CHANGELOG.md | grep "^+[#*]" | sed -e 's/+#/#/g' | sed -e 's/+\*/\*/g' | perl -pe 's/\n/\\n/g' | sed "s/\"/'/g")\" >> ${BASH_ENV}
            echo export DEPLOY_WORKFLOW_INFO=\"### Deploy Information\\n* **Workflow URL** https://circleci.com/workflow-run/${CIRCLE_WORKFLOW_ID}\" >> ${BASH_ENV}
      - run: echo $VERSION
      - run:
          name: Publish Github Release
          command: |
            curl --data "{ \"tag_name\": \"v${VERSION}\", \
            \"target_commitish\": \"master\", \
            \"name\": \"v${VERSION}\", \
            \"body\": \"${NEW_CHANGE_LOG} ${DEPLOY_WORKFLOW_INFO}\", \
            \"draft\": false, \
            \"prerelease\": false \
            }" -u "$GIT_HUB_API_USERNAME" -H "Content-Type: application/json" https://api.github.com/repos/univision/univision-fe/releases

  imagepush-fargate:
    working_directory: ~/univision/univision-fe
    docker:
      - image: univision/fe-webapp-base:8
    steps:
      - checkout
      - setup_remote_docker
      - attach_workspace:
          at: workspace
      - run:
          name: Load image
          command: |
            docker load --input workspace/docker-image/image.tar
      - restore_cache:
          keys:
            - univision-fe-build-modules-{{ .Environment.CIRCLE_SHA1 }}
      - run:
          name: Set Environment Variables
          command: |
            yarn ci:setEnvs
            source $BASH_ENV
            echo 'export AWS_ACCESS_KEY_ID="$AWS_ACCESS_KEY_ID_DEV"' >> ${BASH_ENV}
            echo 'export AWS_SECRET_ACCESS_KEY="$AWS_SECRET_ACCESS_KEY_DEV"' >> ${BASH_ENV}
      - run:
          name: Push image
          command: |
            sudo add-apt-repository ppa:deadsnakes/ppa -y
            apt list | grep python3.9
            sudo apt install python3.9
            sudo update-alternatives --install /usr/bin/python3 python3 /usr/bin/python3.9 1
            sudo apt-get install python3.9-distutils
            sudo pip3 install awscli --force-reinstall --upgrade
            eval "$(aws ecr get-login --no-include-email --region $AWS_DEFAULT_REGION --registry-ids $AWS_ECR_ACCOUNT_ID)"
            docker tag $AWS_ECR_IMAGE_NAME:$CIRCLE_SHA1 $FARGATE_ECR_IMAGE_NAME:$CIRCLE_SHA1
            IMAGE_TAG_ENV="${CIRCLE_BRANCH##*/}"
            if [ "$CIRCLE_BRANCH" = "master" ]; then IMAGE_TAG_ENV="uat"; fi
            if [ "$CIRCLE_BRANCH" = "feat/integration" ]; then IMAGE_TAG_ENV="int"; fi
            if [ "$CIRCLE_BRANCH" = "feat/performance" ]; then IMAGE_TAG_ENV="perf"; fi
            docker tag $AWS_ECR_IMAGE_NAME:$CIRCLE_SHA1 $FARGATE_ECR_IMAGE_NAME:$IMAGE_TAG_ENV
            docker push $FARGATE_ECR_IMAGE_NAME:$CIRCLE_SHA1 > fg_image_push.txt
            docker push $FARGATE_ECR_IMAGE_NAME:$IMAGE_TAG_ENV >> fg_image_push.txt

  tag-release:
    working_directory: ~/univision/univision-fe
    docker:
      - image: univision/fe-webapp-base:8
    steps:
      - restore_cache:
          keys:
            - univision-fe-install-{{ .Environment.CIRCLE_SHA1 }}
      - run:
          name: Tag release
          command: |
            mkdir ~/.ssh
            ssh-keyscan github.com >> ~/.ssh/known_hosts
            git config --global user.email "$GITHUB_EMAIL"
            git config --global user.name "$GITHUB_USERNAME"
            CIRCLE_SHA1=$CIRCLE_SHA1 yarn ci:tagRelease

  monitor:
    working_directory: ~/univision/univision-fe
    docker:
      - image: univision/fe-webapp-base:8
    parameters:
      stage_name:
        type: string
    steps:
      - restore_cache:
          keys:
            - univision-fe-build-modules-{{ .Environment.CIRCLE_SHA1 }}
      - run:
          name: Run Page Speed Inside
          command: |
            SLS_STAGE="<< parameters.stage_name >>" yarn ci:monitor

  tag-fargate-prod-image:
    working_directory: ~/univision/univision-fe
    docker:
      - image: univision/fe-webapp-base:8
    steps:
      - run:
          name: Tag fargate production docker image
          command: |
            sudo add-apt-repository ppa:deadsnakes/ppa -y
            apt list | grep python3.9
            sudo apt install python3.9
            sudo update-alternatives --install /usr/bin/python3 python3 /usr/bin/python3.9 1
            sudo apt-get install python3.9-distutils
            sudo pip3 install awscli --force-reinstall --upgrade
            ECR_NAME="${FARGATE_ECR_IMAGE_NAME##*/}"
            NEW_MANIFEST=$(aws ecr batch-get-image --repository-name  $ECR_NAME --image-ids imageTag=$CIRCLE_SHA1 --region $AWS_DEFAULT_REGION --query images[].imageManifest --output text --registry-id $AWS_ECR_ACCOUNT_ID)
            aws ecr put-image --repository-name $ECR_NAME --image-tag prod --image-manifest "$NEW_MANIFEST" --region $AWS_DEFAULT_REGION --registry-id $AWS_ECR_ACCOUNT_ID

workflows:
  version: 2
  build-and-test:
    jobs:
      - checkout-and-install
      - build-modules:
          requires:
            - checkout-and-install
      - lint:
          requires:
            - build-modules
          filters:
            branches:
              ignore:
                - feat/integration
                - feat/performance
                - feat/qa
                - /^ephemeral.*/
                - feat/serverless
            tags:
              ignore: /.*/
      - test:
          requires:
            - build-modules
          filters:
            branches:
              ignore:
                - feat/integration
                - feat/performance
                - feat/qa
                - /^ephemeral.*/
                - feat/serverless
            tags:
              ignore: /.*/
      - export-docs:
          stage_name: dev
          context: serverless-webapp-dev
          requires:
            - build-modules
          filters:
            branches:
              only:
                - feat/integration
      - export-storybooks:
          stage_name: dev
          context: serverless-webapp-dev
          requires:
            - build-modules
          filters:
            branches:
              only:
                - feat/integration
      - build-app:
          requires:
            - build-modules
          filters:
            branches:
              ignore:
                - feat/serverless
            tags:
              ignore: /.*/
      - upload-assets:
          requires:
            - build-app
            - lint
            - test
          filters:
            branches:
              only:
                - master
                - feat/performance
                - tag-hotfix/master
            tags:
              ignore: /.*/
      - docker-image:
          requires:
            - build-app
            - lint
            - test
          filters:
            branches:
              only:
                - master
                - tag-hotfix/master
                - feat/integration
                - feat/performance
                - feat/qa
                - /^ephemeral.*/
                - feat/serverless
            tags:
              ignore: /.*/
      - e2e-cypress:
          requires:
            - build-app
          filters:
            branches:
              only:
                - /^e2e.*/
      - imagepush-fargate:
          requires:
            - docker-image
            - upload-assets
          filters:
            branches:
              only:
                - master
                - tag-hotfix/master
                - feat/integration
                - feat/performance
            tags:
              ignore: /.*/
      - approve-production-release:
          type: approval
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^release-v.+/
      - approve-production-hotfix:
          type: approval
          requires:
            - imagepush-fargate
          filters:
            branches:
              only:
                - tag-hotfix/master
            tags:
              ignore: /.*/
      - npm-publish:
          name: npm-publish-prerelease
          release-type: prerelease
          requires:
            - imagepush-fargate
          filters:
            branches:
              only:
                - master
      - npm-publish:
          name: npm-publish-release
          release-type: release
          requires:
            - deploy-production-fargate
          filters:
            tags:
              only: /^release-v.+/
      - npm-publish:
          name: npm-publish-hotfix
          release-type: hotfix
          requires:
            - deploy-production-hotfix-fargate
          filters:
            branches:
              only:
                - tag-hotfix/master

      - aws-ecs/deploy-service-update:
          name: deploy-uat-fargate
          requires:
            - imagepush-fargate
          context: global-fargate-dev
          family: 'uat-fargate-webapp-Family'
          cluster-name: 'uat-fargate-webapp'
          service-name: 'uat-fargate-webapp-Service'
          container-image-name-updates: 'container=fargate-webapp,tag=${CIRCLE_SHA1}'
          verify-revision-is-deployed: true
          filters:
            branches:
              only:
                - master

      - aws-ecs/deploy-service-update:
          name: deploy-integration-fargate
          requires:
            - imagepush-fargate
          context: global-fargate-dev
          family: 'int-fargate-webapp-Family'
          cluster-name: 'int-fargate-webapp'
          service-name: 'int-fargate-webapp-Service'
          container-image-name-updates: 'container=fargate-webapp,tag=${CIRCLE_SHA1}'
          verify-revision-is-deployed: true
          filters:
            branches:
              only:
                - feat/integration

      - aws-ecs/deploy-service-update:
          name: deploy-performance-fargate
          requires:
            - imagepush-fargate
          context: global-fargate-dev
          family: 'perf-fargate-webapp-Family'
          cluster-name: 'perf-fargate-webapp'
          service-name: 'perf-fargate-webapp-Service'
          container-image-name-updates: 'container=fargate-webapp,tag=${CIRCLE_SHA1}'
          verify-revision-is-deployed: true
          filters:
            branches:
              only:
                - feat/performance

      - aws-ecs/deploy-service-update:
          name: deploy-production-fargate
          requires:
            - approve-production-release
          context: global-fargate-prod
          family: 'prod-fargate-webapp-Family'
          cluster-name: 'prod-fargate-webapp'
          service-name: 'prod-fargate-webapp-Service'
          container-image-name-updates: 'container=fargate-webapp,tag=${CIRCLE_SHA1}'
          verify-revision-is-deployed: true
          filters:
            tags:
             only: /^release-v.+/

      - aws-ecs/deploy-service-update:
          name: deploy-production-hotfix-fargate
          requires:
            - approve-production-hotfix
          context: global-fargate-prod
          family: 'prod-fargate-webapp-Family'
          cluster-name: 'prod-fargate-webapp'
          service-name: 'prod-fargate-webapp-Service'
          container-image-name-updates: 'container=fargate-webapp,tag=${CIRCLE_SHA1}'
          verify-revision-is-deployed: true
          filters:
            branches:
              only:
                - tag-hotfix/master

      #to tag the docker image in fargate for prod deployments
      - tag-fargate-prod-image:
          name: tag-fargate-prod-image-release
          context: global-fargate-prod
          requires:
            - deploy-production-fargate
          filters:
            tags:
             only: /^release-v.+/

      - tag-fargate-prod-image:
          name: tag-fargate-prod-image-hotfix
          context: global-fargate-prod
          requires:
            - deploy-production-hotfix-fargate
          filters:
            branches:
              only:
                - tag-hotfix/master

      - approve-tag-release:
          type: approval
          requires:
            - deploy-uat-fargate
      - tag-release:
          context: org-global
          requires:
            - approve-tag-release
          filters:
            tags:
              ignore: /.*/
      - publish-github-release:
          requires:
            - npm-publish-release
            - npm-publish-hotfix
          filters:
            branches:
              only:
                - tag-hotfix/master
            tags:
              only: /^release-v.+/
      # Deploy nextjs lambda in dev env
      - deploy-lambda:
          name: deploy-lambda-dev
          stage_name: dev
          context: serverless-webapp-dev
          requires:
            - build-modules
          filters:
            branches:
              only:
                - feat/serverless
      # Deploy nextjs lambda in int env
      - deploy-lambda:
          name: deploy-lambda-integration
          stage_name: integration
          context: serverless-webapp-dev
          requires:
            - build-modules
          filters:
            branches:
              only:
                - feat/integration
      # Deploy nextjs lambda in perf env
      - deploy-lambda:
          name: deploy-lambda-perf
          stage_name: perf
          # to upload assets to prod S3 bucket
          context: serverless-webapp-dev
          requires:
            - build-modules
          filters:
            branches:
              only:
                - feat/performance
      # Deploy nextjs lambda in uat env
      - deploy-lambda:
          name: deploy-lambda-uat
          stage_name: uat
          # to upload assets to prod S3 bucket
          context: serverless-webapp-prod
          requires:
            - deploy-uat-fargate
          filters:
            branches:
              only:
                - master
      # Deploy nextjs lambda in prod
      - deploy-lambda-prod:
          context: serverless-webapp-prod
          requires:
            - npm-publish-release
          filters:
            tags:
              only: /^release-v.+/
      # Deploy nextjs lambda in prod on hotfix
      - deploy-lambda:
          name: deploy-lambda-prod-hotfix
          stage_name: prod
          # to upload assets to prod S3 bucket
          context: serverless-webapp-prod
          requires:
            - npm-publish-hotfix
          filters:
            branches:
              only:
                - tag-hotfix/master
      # Page Speed Inside report on uat
      - monitor:
          name: Perf Report
          stage_name: uat
          context: serverless-webapp-dev
          requires:
            - deploy-uat-fargate
          filters:
            branches:
              only:
                - master
      # Page Speed Inside report on prod
      - monitor:
          name: Perf Report Prod
          stage_name: prod
          context: serverless-webapp-prod
          requires:
            - deploy-production-fargate
          filters:
            tags:
              only: /^release-v.+/
