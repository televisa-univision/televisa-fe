service: serverless-webapp-nextjs
layers:
  styles:
    package:
      include:
        - ./**
    path: build/layer
provider:
  name: aws
  runtime: nodejs18.x
  stage: ${opt:stage, 'dev'}
  memorySize: 2048
  tracing:
    lambda: true
    apiGateway: true
  logs:
    restApi: true
  tags:
    env: ${opt:stage, 'dev'}
    Project: serverless-webapp
  environment:
    API_ENV: ${env:API_ENV}
    APP_VERSION: ${env:APP_VERSION}
    AWS_S3_ASSETS_BUCKET: ${env:AWS_S3_ASSETS_BUCKET}
    CASTING_RECEIVER_ID: ${env:CASTING_RECEIVER_ID}
    CMS_API_URL: ${env:CMS_API_URL}
    GRAPHQL_API_URL: ${env:GRAPHQL_API_URL}
    SSO_IFRAME_URL: ${env:SSO_IFRAME_URL}
    PROXY_API_URL: ${env:PROXY_API_URL}
    DEPLOY_ENV: ${env:DEPLOY_ENV}
    VERSION: ${env:VERSION}
    VIDEO_HUB_ENV: ${env:VIDEO_HUB_ENV}
    VIDEO_HUB_PROFILE: ${env:VIDEO_HUB_PROFILE}
    VIDEO_HUB_API_KEY: ${env:VIDEO_HUB_API_KEY}
plugins:
  - serverless-nextjs-plugin-uvn
  - serverless-plugin-datadog
  - serverless-plugin-canary-deployments
  - serverless-prune-plugin
package:
  exclude:
    - ./**
custom:
  deploymentSettings:
    stages:
      - prod
  serverless-nextjs:
    customHandler: .serverless_nextjs_wrapper
    assetsBucketName: ${env:AWS_S3_ASSETS_BUCKET}
    cloudFront: false
    createAssetBucket: false
    nextConfigDir: ./
    routes:
      - src: univision/amp
        path: univision/amp
      - src: univision/amp
        path: univision/amp/{slug+}
        request:
          parameters:
            paths:
              slug: true
      - src: univision/archivo
        path: univision/archivo
      - src: univision/archivo
        path: univision/archivo/{slug+}
        request:
          parameters:
            paths:
              slug: true
      - src: univision/component
        path: univision/component
      - src: univision/component
        path: univision/component/{slug+}
        request:
          parameters:
            paths:
              slug: true
      - src: tudn/amp
        path: tudn/amp
      - src: tudn/amp
        path: tudn/amp/{slug+}
        request:
          parameters:
            paths:
              slug: true
      - src: tudn/archivo
        path: tudn/archivo
      - src: tudn/archivo
        path: tudn/archivo/{slug+}
        request:
          parameters:
            paths:
              slug: true
      - src: tudn/cast
        path: tudn/cast
      - src: canal5/amp
        path: canal5/amp
      - src: canal5/amp
        path: canal5/amp/{slug+}
        request:
          parameters:
            paths:
              slug: true
      - src: distritocomedia/amp
        path: distritocomedia/amp
      - src: distritocomedia/amp
        path: distritocomedia/amp/{slug+}
        request:
          parameters:
            paths:
              slug: true
      - src: elnu9ve/amp
        path: elnu9ve/amp
      - src: elnu9ve/amp
        path: elnu9ve/amp/{slug+}
        request:
          parameters:
            paths:
              slug: true
      - src: lasestrellas/amp
        path: lasestrellas/amp
      - src: lasestrellas/amp
        path: lasestrellas/amp/{slug+}
        request:
          parameters:
            paths:
              slug: true
      - src: televisa/amp
        path: televisa/amp
      - src: televisa/amp
        path: televisa/amp/{slug+}
        request:
          parameters:
            paths:
              slug: true
      - src: unicable/amp
        path: unicable/amp
      - src: unicable/amp
        path: unicable/amp/{slug+}
        request:
          parameters:
            paths:
              slug: true
    pageConfig:
      univision:
        events:
          - http:
              path: univision
              method: get
          - http:
              path: univision/
              method: get
          - http:
              path: univision/{proxy+}
              method: get
        deploymentSettings:
          type: Linear10PercentEvery1Minute
          alias: Live
        layers:
          # Ref name is generated by TitleCasing the layer name & appending LambdaLayer
          - { Ref: StylesLambdaLayer }
      tudn:
        events:
          - http:
              path: tudn
              method: get
          - http:
              path: tudn/
              method: get
          - http:
              path: "tudn/{proxy+}"
              method: get
        deploymentSettings:
          type: Linear10PercentEvery1Minute
          alias: Live
        layers:
          - { Ref: StylesLambdaLayer }
      prendetv:
        events:
          - http:
              path: prendetv
              method: get
          - http:
              path: prendetv/
              method: get
          - http:
              path: prendetv/{proxy+}
              method: get
        deploymentSettings:
          type: Linear10PercentEvery1Minute
          alias: Live
        layers:
          - { Ref: StylesLambdaLayer }
      mulher:
        events:
          - http:
              path: mulher
              method: get
          - http:
              path: mulher/
              method: get
          - http:
              path: mulher/{proxy+}
              method: get
        deploymentSettings:
          type: Linear10PercentEvery1Minute
          alias: Live
        layers:
          - { Ref: StylesLambdaLayer }
      delicioso:
        events:
          - http:
              path: delicioso
              method: get
          - http:
              path: delicioso/
              method: get
          - http:
              path: delicioso/{proxy+}
              method: get
        deploymentSettings:
          type: Linear10PercentEvery1Minute
          alias: Live
        layers:
          - { Ref: StylesLambdaLayer }
      zappeando:
        events:
          - http:
              path: zappeando
              method: get
          - http:
              path: zappeando/
              method: get
          - http:
              path: zappeando/{proxy+}
              method: get
        deploymentSettings:
          type: Linear10PercentEvery1Minute
          alias: Live
        layers:
          - { Ref: StylesLambdaLayer }
      tasaudavel:
        events:
          - http:
              path: tasaudavel
              method: get
          - http:
              path: tasaudavel/
              method: get
          - http:
              path: tasaudavel/{proxy+}
              method: get
        deploymentSettings:
          type: Linear10PercentEvery1Minute
          alias: Live
        layers:
          - { Ref: StylesLambdaLayer }
      lasestrellas:
        events:
          - http:
              path: lasestrellas
              method: get
          - http:
              path: lasestrellas/
              method: get
          - http:
              path: lasestrellas/{proxy+}
              method: get
        deploymentSettings:
          type: Linear10PercentEvery1Minute
          alias: Live
        layers:
          - { Ref: StylesLambdaLayer }
      # telehit:
      #   events:
      #     - http:
      #         path: telehit
      #         method: get
      #     - http:
      #         path: telehit/
      #         method: get
      #     - http:
      #         path: telehit/{proxy+}
      #         method: get
      #   deploymentSettings:
      #     type: Linear10PercentEvery1Minute
      #     alias: Live
      #   layers:
      #     - {Ref: StylesLambdaLayer}
      # losbingers:
      #   events:
      #     - http:
      #         path: losbingers
      #         method: get
      #     - http:
      #         path: losbingers/
      #         method: get
      #     - http:
      #         path: 'losbingers/{proxy+}'
      #         method: get
      #   deploymentSettings:
      #     type: Linear10PercentEvery1Minute
      #     alias: Live
      #   layers:
      #     - {Ref: StylesLambdaLayer}
      canal5:
        events:
          - http:
              path: canal5
              method: get
          - http:
              path: canal5/
              method: get
          - http:
              path: canal5/{proxy+}
              method: get
        deploymentSettings:
          type: Linear10PercentEvery1Minute
          alias: Live
        layers:
          - { Ref: StylesLambdaLayer }
      elnu9ve:
        events:
          - http:
              path: elnu9ve
              method: get
          - http:
              path: elnu9ve/
              method: get
          - http:
              path: elnu9ve/{proxy+}
              method: get
        deploymentSettings:
          type: Linear10PercentEvery1Minute
          alias: Live
        layers:
          - { Ref: StylesLambdaLayer }
      unicable:
        events:
          - http:
              path: unicable
              method: get
          - http:
              path: unicable/
              method: get
          - http:
              path: unicable/{proxy+}
              method: get
        deploymentSettings:
          type: Linear10PercentEvery1Minute
          alias: Live
        layers:
          - { Ref: StylesLambdaLayer }
      distritocomedia:
        events:
          - http:
              path: distritocomedia
              method: get
          - http:
              path: distritocomedia/
              method: get
          - http:
              path: distritocomedia/{proxy+}
              method: get
        deploymentSettings:
          type: Linear10PercentEvery1Minute
          alias: Live
        layers:
          - { Ref: StylesLambdaLayer }
      televisa:
        events:
          - http:
              path: televisa
              method: get
          - http:
              path: televisa/
              method: get
          - http:
              path: televisa/{proxy+}
              method: get
        deploymentSettings:
          type: Linear10PercentEvery1Minute
          alias: Live
        layers:
          - { Ref: StylesLambdaLayer }
  datadog:
    flushMetricsToLogs: true
    # This two flags in false allows to send trace through x-ray integration instead of using the forwarder
    # Forwarder lambda has a limitation when using VPC conection and its not allowing to send traces
    # AWS X-Ray application must be installed on Datadog under Integration
    # Enable tracing on Lambda functions and API Gateway integrations. Defaults to true
    enableXrayTracing: false
    # Enable tracing on Lambda function using dd-trace, datadog's APM library. Requires datadog log forwarder to be set up. Defaults to true.
    enableDDTracing: false
    # When set, the plugin will try to subscribe the lambda's cloudwatch log groups to the forwarder with the given arn.
    forwarder: ${env:DD_FORWARDER}
  prune:
    automatic: true
    includeLayers: true
    number: 10
